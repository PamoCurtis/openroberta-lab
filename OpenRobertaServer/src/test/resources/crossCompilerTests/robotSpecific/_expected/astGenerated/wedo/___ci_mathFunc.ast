
Var [x] := Binary [ADD, Var [x], FunctionExpr [MathSingleFunct [ROOT, [NumConst [4]]]]]


Var [x] := Binary [ADD, Var [x], FunctionExpr [MathSingleFunct [ABS, [NumConst [-2]]]]]


Var [x] := Binary [ADD, Var [x], Unary [NEG, NumConst [-4]]]


Var [x] := Binary [ADD, Var [x], FunctionExpr [MathSingleFunct [LN, [FunctionExpr [MathSingleFunct [EXP, [NumConst [2]]]]]]]]


Var [x] := Binary [ADD, Var [x], FunctionExpr [MathSingleFunct [LOG10, [NumConst [100]]]]]


Var [x] := Binary [ADD, Var [x], FunctionExpr [MathSingleFunct [POW10, [NumConst [2]]]]]


Var [x] := Binary [ADD, Var [x], Binary [MOD, NumConst [5], NumConst [3]]]


Var [x] := Binary [ADD, Var [x], FunctionExpr [MathSingleFunct [SIN, [Binary [DIVIDE, MathConst [PI], NumConst [2]]]]]]


Var [x] := Binary [ADD, Var [x], FunctionExpr [MathSingleFunct [ROUNDDOWN, [NumConst [42.8]]]]]


Var [x] := Binary [ADD, Var [x], FunctionExpr [MathConstrainFunct [[NumConst [2], NumConst [1], NumConst [100]]]]]

ShowTextAction [FunctionExpr [TextJoinFunct [StringConst [expected: 159, got:], Var [x]]], EmptyExpr [defVal=NUMBER_INT], EmptyExpr [defVal=NUMBER_INT]]
